# -*- coding: utf-8 -*-
"""RS using tf idf.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wYdB-nzw5iVjCHs16vgF5G7HLjANQhWt
"""

# Commented out IPython magic to ensure Python compatibility.
# Importing necessary libraries
import pandas as pd
import numpy as np
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
from sklearn.metrics.pairwise import linear_kernel
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfVectorizer
from nltk.tokenize import RegexpTokenizer
import re
import string
import random
from PIL import Image
import requests
from io import BytesIO
import matplotlib.pyplot as plt
# %matplotlib inline
from sklearn.metrics.pairwise import cosine_similarity
from gensim.models import Word2Vec
from gensim.models.phrases import Phrases, Phraser
from matplotlib import pyplot
from gensim.models import KeyedVectors
# import wget

df = pd.read_csv("flipkart selected columns.csv", encoding='utf-8')

df=df.sample(n=5000, random_state=1)

pattern = r'(https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}[-a-zA-Z0-9()@:%_+.~#?&/=]*)'

# df['links'] = ''
df['links']= df["image"].str.extract(pattern, expand=True)

df

df=df.drop(['image'], axis=1)

df.to_csv('df_5000_selected columns.csv', index=False,
          compression=None)

#Utitlity functions for removing ASCII characters, converting lower case, removing stop words, html and punctuation from description

def _removeNonAscii(s):
  s=str(s)
  return "".join(i for i in s if  ord(i)<128)

def make_lower_case(text):
    return text.lower()

def remove_stop_words(text):
    text = text.split()
    stops = set(stopwords.words("english"))
    text = [w for w in text if not w in stops]
    text = " ".join(text)
    return text

def remove_html(text):
    html_pattern = re.compile('<.*?>')
    return html_pattern.sub(r'', text)

def remove_punctuation(text):
    tokenizer = RegexpTokenizer(r'\w+')
    text = tokenizer.tokenize(text)
    text = " ".join(text)
    return text

def remove_num(text):
  text2=''
  nums='0123456789'
  for i in text:
    if i in nums:
      i=''
    text2+=i
  return text2

df=df.drop_duplicates(subset=['product_name'])

df['cleaned'] = df['product_name'].apply(_removeNonAscii)

df['cleaned'] = df.cleaned.apply(func = make_lower_case)
df['cleaned'] = df.cleaned.apply(func = remove_stop_words)
df['cleaned'] = df.cleaned.apply(func=remove_punctuation)
df['cleaned'] = df.cleaned.apply(func=remove_html)
df['cleaned'] = df.cleaned.apply(func=remove_num)

df=df.reset_index(drop=True)

corpus = df["cleaned"].tolist()

from sklearn.feature_extraction.text import TfidfVectorizer

vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(corpus)
vectorizer.get_feature_names_out()

X=X.todense()

df=df.drop_duplicates(subset=['product_name'])

# Recommending the Top 5 similar books

def recommendations(product_name):
    
    # Calling the function vectors

    # vectors(df)
    
    # finding cosine similarity for the vectors

    cosine_similarities = cosine_similarity(X)

    # taking the title and book image link and store in new data frame called books
    books = df[['product_name', 'links']]
    #Reverse mapping of the index
    indices = pd.Series(df.index, index = df['product_name']).drop_duplicates()
         
    idx = indices[product_name]
    sim_scores = list(enumerate(cosine_similarities[idx]))
    sim_scores = sorted(sim_scores, key = lambda x: x[1], reverse = True)
    sim_scores = sim_scores[1:20]
    book_indices = [i[0] for i in sim_scores]
    recommend = books.iloc[book_indices]
    for index, row in recommend.iterrows():

        response = requests.get(row['links'])
        img = Image.open(BytesIO(response.content))
        plt.figure()
        plt.imshow(img)
        plt.title(row['product_name'])

recommendations("Divine Forever Alloy Necklace")

recommendations("Raymond Abstract Single Blanket Orange")

recommendations("G & M Collections Striped Women's A-line Skirt")

recommendations("Karishma Women's Solid Formal Shirt")

recommendations("Allure Auto CM 1806 Car Mat Renault Scala")

recommendations("Liza Women Wedges")

recommendations("Generation Z Women's Leggings")

recommendations("Dorrissini Party Wear")

recommendations("Gear X Sports Mount 2")

recommendations("HomeeHub Polyester Multicolor Self Design Eyelet Door Curtain")

recommendations("Simrit Women's Pyjama")

recommendations("Rockmantra Black Old Batman Car Ceramic Mug")